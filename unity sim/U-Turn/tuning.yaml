self.max_speed = 20.0  # [m/s]
        self.min_speed = -0.1  # [m/s]
        self.max_yaw_rate = 28.0 * math.pi / 180.0  # [rad/s]
        self.max_accel = 0.01  # [m/ss]
        self.max_delta_yaw_rate = 80.0 * math.pi / 180.0  # [rad/ss]
        self.v_resolution = 1.3  # [m/s]
        self.yaw_rate_resolution = 0.1 * math.pi / 180.0  # [rad/s]
        self.dt = 0.2  # [s] Time tick for motion prediction
        self.predict_time = 0.8  # [s]
        self.to_goal_cost_gain = 0.001
        self.speed_cost_gain = 5.0
        self.obstacle_cost_gain = 0.2
        self.robot_stuck_flag_cons = 0.1  # constant to prevent robot stucked

        # Also used to check if goal is reached in both types
        self.robot_radius = 3.0  # [m] for collision check

        # if robot_type == RobotType.rectangle
        self.robot_width = 1.0  # [m] for collision check
        self.robot_length = 2.0  # [m] for collision check
        self.start = []
        self.goal = []